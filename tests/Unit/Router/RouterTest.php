<?php

namespace Tests\Unit\Router;

use Exception;
use Tests\BaseTestCase;
use Frankapi\Router\Router;

/**
 * @covers \Frankapi\Router\Route
 * @covers \Frankapi\Router\Router
 * @covers \Frankapi\Router\RouterInterface
 */
final class RouterTest extends BaseTestCase
{

    private Router $router;

    public function setUp(): void
    {
        $this->router = new Router();
        parent::setUp(); // TODO: Change the autogenerated stub
    }

    /**
     * @test
     * @covers \Frankapi\Router\Router::register
     * @return void
     */
    public function it_registers_a_route()
    {

        $this->router->register('POST', '/users', ['someClass', 'someAction']);

        $this->assertIsArray($this->router->routes);

        $this->assertArrayHasKey(
            key: 'POST',
            array: $this->router->routes
        );

        $expectedArray = [['someClass', 'someAction']];

        $this->assertSame(
            expected: $expectedArray,
            actual: ($this->router->routes['POST']['/users'])->action
        );

    }


    /**
     * @test
     * @return void
     * @throws Exception
     */
    public function it_matches_route_by_path()
    {
        $this->router->get('/users', function () {
            return json_encode([
                'data' => 'List with all uses'
            ]);
        });

        $route = $this->router->matchRoute('GET', '/users');

        $this->assertSame(
            expected: '/users',
            actual: $route->path
        );

    }

    /**
     * @test
     * @throws Exception
     */
    public function it_matches_routes_by_path_with_parameters()
    {

        $this->router->get('/users/{id}/assign/task/{taskId}', function (int $id) {
            return json_encode([
                'data' => [
                    'id' => $id
                ]
            ]);
        });

        $route = $this->router->matchRoute(
            method: 'GET',
            path: '/users/1/assign/task/3424'
        );

        $this->assertSame(
            expected: '/users/{id}/assign/task/{taskId}',
            actual: $route->path
        );

    }

}